FORMAT: 1A
HOST: http://api.cassianetworks.com/

# Cassia SDK Manual


The Cassia SDK was developed in response to requests from third party developers and device manufacturers to utilize the Bluetooth routing and extended range capabilities of the Cassia AP while using their Native apps and/or Cloud Servers to connect and control upto 22-BLE devices per AP simultaneously. Furthermore, the SDK was designed to be integrated directly into your app/server using a HTTP/HTTPS based communication protocol to provide the ultimate programming language flexibility (e.g. C#, Node.js, Java, etc.).
The SDK enables you to create Bluetooth applications based on Cassia AP. This Manual helps you learn how to use the Cassia SDK and its associated Services. You can read the Manual from start to finish or use it as a reference.



## SDK Overview
Cassia SDK was already integrated into the AP, allowing you to work with components and visual aids to build your application. It provides:
- Control & connect your sensor.
- Three modes can be supported: Scanning, Connecting, Broadcasting.
- Write a data to sensor via Cloud server & AP.
- Read data as notification/indication events from sensor via Cloud server & AP.
- Networks configuration are served as platform to adapt flexible environments.
- Make remote procedure calls (RPCs) from servers to clients.



## Further sources of information
You should now be equipped with the knowledge you need to start using it:
- Developement language reference: [Nodejs](https://nodejs.org), [Java](https://www.java.com), [Python](https://www.python.org/), [C#](https://msdn.microsoft.com/en-us/library/kx37x362.aspx), [PHP](http://php.net)...
- The Networks Knowledge Base: [HTTP](https://en.wikipedia.org/wiki/HTTP), [HTTPS](https://en.wikipedia.org/wiki/HTTPS), [OAuth](http://oauth.net/), [Server-Sent Events](https://www.w3.org/TR/2011/WD-eventsource-20110208/), [JSON](http://json.org/).
- The Bluetooth Knowledge Base: [GAP](https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gap), [GATT](https://learn.adafruit.com/introduction-to-bluetooth-low-energy/gatt)




## Getting Start

### 1. Connect your Cassia AP
Use the cable connect Cassia AP to Router. At inital, Internet access in your environment is required.
WIFI is supported also, you can use [API](#reference/apis/configuration) for setup it.

### 2. Discover Cassia AP
All of services are based IP address, So Let's take a quick look at this section.

1. The fast way is find a MAC id on the bottom of Cassia AP, and visit [here](http://api.cassianetworks.com/cassia/hubs/%1) (please replace %1 to MAC) for get an IP address directly. and then you can modify and fix your IP (please see [API](#reference/apis/configuration)).

2. Another way is use UDP broadcasting, when AP is running, it's will listsen UDP port `34952`, You can broadcast `CASSIA_HUB_DISCOVERY` to this address `255.255.255.255` for discovery Cassia AP. and then 
AP will feedback as format `ip-port-mac`, And you can use IP for access to Cassia AP.
NOTE: If you use UDP broadcasting, the Discovery application should be stay in one LAN with Cassia AP which can be discoveried.

Currently, AP use DHCP (Dynamic IP address) as a default configuration. In some of cases, UDP broadcasting will be a good choose.

### 3. Access Cassia AP directly
If the IP address (in LAN)  has known already, you can access it directly.
Cassia AP provides a built-in RESTful API to let you manage your Bluetooth device. This allows you to control (scan mode will be support more than 22) & connect (upto 22) sensors within a single AP in your application.

### 4. Access Cassia AP from Cloud
- Request a developer account from Cassia associate.
- Access http://{Your-Cassia-AP-IP}/ (eg. http://192.168.1.8) you can get a entry page of AP.
- Setup your developer account and cloud server address(default is api.cassianetworks.com) in `Remote Control` section
- Do an OAuth2.0 authentication with cloud server with client credentials grant https://tools.ietf.org/html/rfc6749#section-4.4
- You can use RESTful API access your Cassia AP now append an extra parameter `mac=<Cassia-AP-MAC>`

for example:
  you get a developer account with name: tester, secret: 10b83f9a2e823c47, use base64 encode string "tester:10b83f9a2e823c47", get string "dGVzdGVyOjEwYjgzZjlhMmU4MjNjNDc="
  authenticate using following http request:
```
    POST /oauth2/token HTTP/1.1
    Host: api.cassianetworks.com
    Authorization: Basic dGVzdGVyOjEwYjgzZjlhMmU4MjNjNDc=
    Content-Type: application/x-www-form-urlencoded
    
    grant_type=client_credentials
```

if nothing wrong you will get response json like this: 
```
HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
Cache-Control: no-store
Pragma: no-cache

{ token_type: 'bearer',
  access_token: '2b6ced831413685ec33204abc2a9a476310a852f53a763b72c854fd7708499f1bc0b3626bfcfef2a2cfe0519356c9d7cb1b514243cb29f60e76b92d4a64ea8bd',
  expires_in: 3600 }
```

  now you can use access_token access other apis,
  
  add access_token in url parameters like: http://api.cassianetworks.com/gap/nodes/?event=1&mac=xxx&access_token=xxxxx
  
  or you can add access_token in headers "Authorization : Bearer xxxx"


### 5. Configuration
Please visit http://{Your-Cassia-AP-IP}/ (eg. http://192.168.1.8), you can config this AP (wired/wireless ..) and get some details about Cassia AP.


# Group APIs

Resources related to cassia hub in the API.

## Authentication with Cloud [/oauth2/token]
### Get Access Token.Other request must add access_token=<access_token> in url parameter, or add Authorization : Bearer <access_token> in headers[POST]
+ Request (application/json)

    + Headers
    
            Authorization : Basic Base64(<client_id>:<secret>)
        
    + Body
    
            {"grant_type" : "client_credentials"}
        
+ Response 200 (application/json)

        { 
        token_type: 'bearer',
        access_token: 'f961c49ec1ab1fc0a53f79767f055bdd9a3d902824b6b965a11ec72a03da163c3417e1ef2bb242285c0c1d624f4bda5906399a9dc4fd4ea9a8cb52d5e6ea6758',
        expires_in: 3600 
        }
  
+ Response 403 (application/json)

        {"error":"access_denied","error_description":"Bearer token not found"}


## Scan [/gap/nodes/{?event,mac,chip,filter_name,filter_mac,filter_uuid}] 
### Start scan and it will return all advertisements received. [GET]

+ Parameters
    + event (required, number, `1`) ... as a [Server-Sent Events](https://www.w3.org/TR/2011/WD-eventsource-20110208/)
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + chip (optional, number) ... chip id as format : '0' or '1'
    + filter_name(optional,string) ... format as "name1,name2,name3...",only return the specified name of device  you want
    + filter_mac(optional,string) ... format as "MAC1,MAC2,MAC3...",only return the specified  MAC of device you want
    + filter_uuid(optional,string) ... format as "UUID1,UUID2,UUID3...",only return the specified service uuid of device  you want
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        [
                "bdaddrs": [{  "bdaddr" : <bdaddr1>,
                "bdaddrType" : <bdaddrType1>  }],
                "adData": <adData1>,
                "scanData": <scanData1>,
                "name" : <name1>,
                "rssi" : <rssi1>
            },
            {
                "bdaddrs": [{  "bdaddr" : <bdaddr2>,
                "bdaddrType" : <bdaddrType2>  }],
                "adData": <adData2>,
                "scanData": <scanData2>,
                "name" : <name2>,
                "rssi" : <rssi2>
            },
            ...
        ]
    
        
        
+ Response 400 (application/string)
   
         Lose parameter or parameter wrrong.
   



## Get connected devices as list [/gap/nodes/{?connection_state,mac}]
### The gateway will return a list of connected devices. [GET]


+ Parameters
    + connection_state (required, string, `connected`) ... the type of the list
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
+ Request (application/json)
        
    + Headers
    
            version: 1
        



+ Response 200 (application/json)
        
        
        "nodes" : [
    
        {
            "self"  : { "href" : ""},
            "handle" : "",
            "bdaddrs": 
                         { 
                            "bdaddr" : "",
                            "bdaddrType" : "" 
                          },

            "connectionState" : "connected",
            "name" : <name1>,
            "id" : <id1>,
            "type" : <type1>,
            "chipId" : <chipId1>
        },
          
        {
            "self"  : { "href" : ""},
            "handle" : "",
            "bdaddrs": 
                         { 
                            "bdaddr" : "",
                            "bdaddrType" : "" 
                          },

            "connectionState" : "connected",
            "name" : <name2>,
            "id" : <id2>,
            "type" : <type2>,
            "chipId" : <chipId2>
          },
        ...
        ]
        




+ Response 400 (application/string)

        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.




## Connect a device [/gap/nodes/<node>/connection{?mac,chip,type}]
### Connect a device by the specific mac id, please add BODY as data into your POST request [POST]


+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + chip (optional, number) ... chip id as format : '0' or '1'

+ Request (application/json)

    + Headers
    
            version: 1
            
    + Body
    
            {
                "timeOut": "",
                "type" :"public" // There are two kinds of types `public` or `random`, you can get device's type from scan data.
            }
    
     


+ Response 200 (application/string)

        OK

+ Response 400 (application/string)

        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.


+ Response 403 (application/string)

        The request to connect to node with encryption-required parameter set to 1 is 
        not possible to process since gateway does not have node’s LTK key


+ Response 404 (application/string)

        The server has not found anything matching the Request-URI. No indication is 
        given of whether the condition is temporary or permanent.




## Disconnect a device [/gap/nodes/<node>/connection{?mac}]
### Disconnect a device by the specific mac. [DELETE]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`

+ Request (application/json)
    
      
     + Headers
    
            version: 1


+ Response 200 (application/string)

        OK


+ Response 400 (application/string)

        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.


+ Response 403 (application/string)

        The request to connect to node with encryption-required parameter set to 1 is 
        not possible to process since gateway does not have node’s LTK key


+ Response 404 (application/string)

        The server has not found anything matching the Request-URI. No indication is 
        given of whether the condition is temporary or permanent.




## Discover services [/gatt/nodes/<node>/services/{?mac,all,uuid}]
### This url will discover the whole services of the specific node and uuid[GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + all (required,number, `1`) ... sercices type 
    + uuid (optional,string) ... service uuid,when described ,the url will return the specific services 
        identified by it
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        "services" :[
        
        
                    {
                        "self" : { "href" :"" },
                        "handle"  : <handle1>,  
                        "uuid"      : <uuid1>,                
                        "primary" :  true/false            
                    },{
                        "self" : { "href" :"" },
                        "handle"  : <handle2>,  
                        "uuid"      : <uuid2>,                
                        "primary" :  true/false            
                    }

        ]
        

+ Response 400 (application/string)

         The request could not be understood by the server due to malformed syntax. 
         The client SHOULD NOT repeat the request without modifications.


+ Response 404 (application/string)

        The server has not found anything matching the Request-URI. No indication 
        is given of whether the condition is temporary or permanent.


+ Response 500 (application/string)

        The gateway was unable to fulfill the request. More detailed information 
        on the cause of the error can be found in the response body (entity). See section 7.





## Discover characteristics [/gatt/nodes/<node>/services/<service>/characteristics{?mac,all}]
### Discover all characteristics of the specific service [GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + all (required,number, `1`) ... characteristics type 
    + service (required,string) ... the service uuid
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        "characteristics" :[
        
        
                    {
                        "self" : { "href" :"" },
                        "handle"  : <handle1>,  
                        "uuid"      : <uuid1>,                
                        "properties" :  <properties>            
                    },{
                        "self" : { "href" :"" },
                        "handle"  : <handle2>,  
                        "uuid"      : <uuid2>,                
                        "properties" :  <properties>            
                    }

        ]        
        
        



## Discover the characteristics [/gatt/nodes/<node>/characteristics{?mac,uuid}]
### Discover all characteristics of the specific characeristic [GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + uuid (required,string) ... the characteristic uuid
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        "characteristics" :[
        
        
                    {
                        "self" : { "href" :"" },
                        "handle"  : <handle1>,  
                        "uuid"      : <uuid1>,                
                        "properties" :  <properties>            
                    },{
                        "self" : { "href" :"" },
                        "handle"  : <handle2>,  
                        "uuid"      : <uuid2>,                
                        "properties" :  <properties>            
                    }

        ]        
        
        
        



## Discover descriptors [/gatt/nodes/<node>/characteristics/<characteristic>/descriptors{?mac}]
### Discover all descripters of the specific characeristic [GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + characteristic (required,string) ... the characteristic uuid
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        "characteristics" :[
        
        
                    {
                        "self" : { "href" :"" },
                        "handle"  : <handle1>,  
                        "uuid"      : <uuid1>,                
                    },{
                        "self" : { "href" :"" },
                        "handle"  : <handle2>,  
                        "uuid"      : <uuid2>,                
                    }

        ]        
        
        
        


## Discover services & characteristics & desciptors [/gatt/nodes/<node>/services/characteristics/descriptors{?mac}]
### this url will return the whole services & characteristics & desciptorsof the specified device[GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        "services" :[
                    
            {   
                "startHandle":<startHandle1>,
                "endHandle":<endHandle1>,
                "uuid":<uuid1>,
                "characteristics":[
                    {
                        "handle": <handle1-1>,
                        "uuid": <uuid1-1>,
                        "properties": <properties1-1>,
                        valueHandle: <valueHandle1-1>,
                        descriptors: [
                                {
                                    "uuid":<uuid1-1-1>,
                                    "handle": <handle1-1-1>
                                },
                                {
                                    "uuid":<uuid1-1-2>,
                                    "handle": <handle1-1-2>
                                }
                                ...
                        
                        ]
                    },
                    {
                        "handle": <handle1-2>,
                        "uuid": <uuid1-2>,
                        "properties": <properties1-2>,
                        valueHandle: <valueHandle1-2>,
                        descriptors: [
                                {
                                    "uuid":<uuid1-2-1>,
                                    "handle": <handle1-2-1>
                                },
                                {
                                    "uuid":<uuid1-2-2>,
                                    "handle": <handle1-2-2>
                                }
                                ...
                        
                        ]
                    }
                
                ],
                "primary":true/false
                    
            },
            
            {
                "startHandle":<startHandle2>,
                "endHandle":<endHandle2>,
                "uuid":<uuid2>,
                "characteristics":[],
                "primary":true/false

            }
            ...

        ]        
        
        
        

## Get device name [/gap/nodes/<node>/name{?mac}]
### Get the name of the device identified by the node [GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`

+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)


        
        {
            "self" : { "href" :"" },
            "name"  : <name>  
        }

    


## Get device connection state [/management/nodes/connection-state{?mac}]
### Get the connection state of the devices that have connected with hub [GET]

+ Parameters
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`

+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)


        
        {
            "handle" : <device_mac>,
            "connectionState"  : <state>  
        }
        
   
        

## Read by handle [/gatt/nodes/<node>/handle/<handle>/value/{?mac}]
### Return data of the specific handle [GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + handle (required, number) ... handle of the node
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    
    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        {
            "self" : { "href" : ""},
            "handle" : <handle>,
            "value"  : <value>
        }
        
       
+ Response 400 (application/string)

        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.


+ Response 403 (application/string)

        Access denied due to protected resource:
        The characteristic value is not readable.
        

+ Response 404 (application/string)
        
        The server has not found anything matching the Request-URI. 
        No indication is given of whether the condition is temporary or permanent.



## Write by handle [/gatt/nodes/<node>/handle/<handle>/value/<value>/{?mac}]
### Write data by the handle of the node as server-sent-event[GET]

+ Parameters
    + node (required, string) ... the node mac id as format :`aa:aa:aa:aa:aa`
    + handle (required, number) ... handle of the node
    + value (required, number) ... the data 
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    

    
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)

        OK

+ Response 400 (application/string)
        
        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.



+ Response 403 (application/string)

        Access denied due to protected resource:
        The characteristic value is not writable.



+ Response 404 (application/string)

        The server has not found anything matching t
        he Request-URI. No indication is given of whether the condition is temporary or permanent.


+ Response 405 (application/string)

        Returned if POST is used and Write without Response not is supported.



+ Response 412 (application/string)

        The additional operation on the resource not supported:
        Writing of long value not supported





## Receive indication & notification [/gatt/nodes/{?event,mac}]
### Receive notification/indication via this method [GET]
+ Parameters
    + event (required, number, `1`) ... as a [Server-Sent Events](https://www.w3.org/TR/2011/WD-eventsource-20110208/)
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    
 
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        [
        
            {
                "self" : { "href" : "" },
                "value": <value>,
                "dataType" : <indication/notification>,
                "id" : <deviceMac>,
                "handle" : <handle>
            },{
                "self" : { "href" : "" },
                "value": <value>,
                "dataType" : <indication/notification>,
                "id" : <deviceMac>,
                "handle" : <handle>
            },
            
            ...
        
        
        ]
        
+ Response 400 (application/string)

        The request could not be understood by the server due to malformed syntax. 
        The client SHOULD NOT repeat the request without modifications.

+ Response 404 (application/string)

        The server has not found anything matching the Request-URI. 
        No indication is given of whether the condition is temporary or permanent.


+ Response 412 (application/string)

        The additional operation on the resource not supported:
        Indication or notification not supported or not activated.


+ Response 500 (application/string)

        The gateway was unable to fulfill the request. 
        More detailed information on the cause of the error can be found in the response body (entity). See section 7.


## Advertise data [/advertise/start{?mac,chip,interval,ad_data,resp_data}]
### Begin advertise data [GET]
+ Parameters
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + chip (required, number) ... chip id as format : '0' or '1'
    + interval (required, number) ... advertise interval
    + ad_data (required, string) ... advertise package
    + resp_data (required, string) ... advertise response package
 
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)

        OK

+ Response 500 (application/string)

        The gateway was unable to fulfill the request. 
        More detailed information on the cause of the error can be found in the response body (entity). See section 7.

## Stop advertise data [/advertise/stop{?mac,chip}]
### Stop advertise data [GET]
+ Parameters
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    + chip (required, number) ... chip id as format : '0' or '1'
 
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)

        OK

+ Response 500 (application/string)

        The gateway was unable to fulfill the request. 
        More detailed information on the cause of the error can be found in the response body (entity). See section 7.


## Reboot the hub [/cassia/reboot/]
### Reboot the hub from LAN [GET]


+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
 
              



## Configuration [/cassia/info/{?mac}]
### Get infomation [GET]
+ Parameters
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
     
+ Request (application/json)
        
    + Headers
    
            version: 1
        
        
+ Response 200 (application/json)
        
        {
            "chip": "",
            "mac": "",
            "wired": {
                "proto":"",
                "ipAddr":"",
                "netMask":"",
                "gateWay":"",
                "dnsAddr1":"",
                "dnsAddr2":""
            },
            "wireless":{
                "ssid":"",
                "password":""
            }
            "networkType": "wired|wireless",
            "networkType": "",
            "timeZone":""
        }



### Set infomation [POST]
+ Parameters
    + mac (optional, string) ... hub mac id as format: `CC:1B:E0:E0:14:90`
    

+ Request (application/json)
        
        {
            "chip": "",
            "mac": "",
            "wired": {
                "proto":"",
                "ipAddr":"",
                "netMask":"",
                "gateWay":"",
                "dnsAddr1":"",
                "dnsAddr2":""
            },
            "wireless":{
                "ssid":"",
                "password":""
            }
            "networkType": "wired|wireless",
            "networkType": "",
            "timeZone":""
        }

      + Headers
    
            version: 1

+ Response 200 (application/json)
